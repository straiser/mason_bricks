import 'package:flutter/material.dart';
{{#isBlocController}}import 'package:{{app_name}}/features/{{feature_name}}/presentation/{{sub_feature_name}}/bloc/{{sub_feature_name}}_bloc.dart'; {{/isBlocController}}
{{#isCubitController}}import 'package:{{app_name}}/features/{{feature_name}}/presentation/{{sub_feature_name}}/bloc/{{sub_feature_name}}_cubit.dart';{{/isCubitController}}
import 'package:flutter_bloc/flutter_bloc.dart';

class {{sub_feature_name.pascalCase()}}Page extends StatelessWidget {
  const {{#pascalCase}}{{sub_feature_name}}{{/pascalCase}}Page({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Title')),
body: BlocBuilder<{{sub_feature_name.pascalCase()}}{{#isBlocController}}Bloc{{/isBlocController}}{{#isCubitController}}Cubit{{/isCubitController}}, {{sub_feature_name.pascalCase()}}State>( 
        builder: (BuildContext context, {{sub_feature_name.pascalCase()}}State state) {
          if (state is {{sub_feature_name.pascalCase()}}Loading) {
            return const Center(child: CircularProgressIndicator());
          } else if (state is {{sub_feature_name.pascalCase()}}Loaded) {

            return const Text('Body');
          } else if (state is {{sub_feature_name.pascalCase()}}Error) {

            return RefreshIndicator(
              onRefresh: () async => _handleOnRefresh(context),
              child: SingleChildScrollView(
      child: SizedBox(
        height: MediaQuery.of(context).size.height,
        width: MediaQuery.of(context).size.width,
        child: const Center(
          child: Text(
            'Empty List',
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    ),
            );
          }

          return const SizedBox.shrink();
        },
      ),
    );
  }
  void _handleOnRefresh(BuildContext context)  { 
    {{#isBlocController}}{{sub_feature_name.pascalCase()}}Bloc.of(context).add(
      const {{sub_feature_name.pascalCase()}}Refreshed(),
    );{{/isBlocController}}
    {{#isCubitController}}context.read<{{sub_feature_name.pascalCase()}}Cubit>().refresh();{{/isCubitController}}
  } 
}